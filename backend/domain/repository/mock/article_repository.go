// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/ganganbiz1/go-nextjs-gcp-portfolio/backend/domain/repository (interfaces: IfArticleRepository)
//
// Generated by this command:
//
//	mockgen -destination=../domain/repository/mock/article_repository.go github.com/ganganbiz1/go-nextjs-gcp-portfolio/backend/domain/repository IfArticleRepository
//

// Package mock_repository is a generated GoMock package.
package mock_repository

import (
	context "context"
	reflect "reflect"

	entity "github.com/ganganbiz1/go-nextjs-gcp-portfolio/backend/domain/entity"
	gomock "go.uber.org/mock/gomock"
)

// MockIfArticleRepository is a mock of IfArticleRepository interface.
type MockIfArticleRepository struct {
	ctrl     *gomock.Controller
	recorder *MockIfArticleRepositoryMockRecorder
}

// MockIfArticleRepositoryMockRecorder is the mock recorder for MockIfArticleRepository.
type MockIfArticleRepositoryMockRecorder struct {
	mock *MockIfArticleRepository
}

// NewMockIfArticleRepository creates a new mock instance.
func NewMockIfArticleRepository(ctrl *gomock.Controller) *MockIfArticleRepository {
	mock := &MockIfArticleRepository{ctrl: ctrl}
	mock.recorder = &MockIfArticleRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIfArticleRepository) EXPECT() *MockIfArticleRepositoryMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockIfArticleRepository) Create(arg0 context.Context, arg1 *entity.Article) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// Create indicates an expected call of Create.
func (mr *MockIfArticleRepositoryMockRecorder) Create(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockIfArticleRepository)(nil).Create), arg0, arg1)
}

// Delete mocks base method.
func (m *MockIfArticleRepository) Delete(arg0 context.Context, arg1, arg2 int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockIfArticleRepositoryMockRecorder) Delete(arg0, arg1, arg2 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockIfArticleRepository)(nil).Delete), arg0, arg1, arg2)
}

// Get mocks base method.
func (m *MockIfArticleRepository) Get(arg0 context.Context, arg1, arg2 int) (*entity.Article, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", arg0, arg1, arg2)
	ret0, _ := ret[0].(*entity.Article)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockIfArticleRepositoryMockRecorder) Get(arg0, arg1, arg2 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockIfArticleRepository)(nil).Get), arg0, arg1, arg2)
}

// List mocks base method.
func (m *MockIfArticleRepository) List(arg0 context.Context, arg1 int) ([]*entity.Article, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "List", arg0, arg1)
	ret0, _ := ret[0].([]*entity.Article)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// List indicates an expected call of List.
func (mr *MockIfArticleRepositoryMockRecorder) List(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "List", reflect.TypeOf((*MockIfArticleRepository)(nil).List), arg0, arg1)
}

// Update mocks base method.
func (m *MockIfArticleRepository) Update(arg0 context.Context, arg1 *entity.Article) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// Update indicates an expected call of Update.
func (mr *MockIfArticleRepositoryMockRecorder) Update(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockIfArticleRepository)(nil).Update), arg0, arg1)
}
