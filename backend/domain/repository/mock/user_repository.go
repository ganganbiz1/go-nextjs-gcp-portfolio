// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/ganganbiz1/go-nextjs-gcp-portfolio/backend/domain/repository (interfaces: IfUserRepository)
//
// Generated by this command:
//
//	mockgen -destination=../domain/repository/mock/user_repository.go github.com/ganganbiz1/go-nextjs-gcp-portfolio/backend/domain/repository IfUserRepository
//

// Package mock_repository is a generated GoMock package.
package mock_repository

import (
	context "context"
	reflect "reflect"

	entity "github.com/ganganbiz1/go-nextjs-gcp-portfolio/backend/domain/entity"
	gomock "go.uber.org/mock/gomock"
)

// MockIfUserRepository is a mock of IfUserRepository interface.
type MockIfUserRepository struct {
	ctrl     *gomock.Controller
	recorder *MockIfUserRepositoryMockRecorder
}

// MockIfUserRepositoryMockRecorder is the mock recorder for MockIfUserRepository.
type MockIfUserRepositoryMockRecorder struct {
	mock *MockIfUserRepository
}

// NewMockIfUserRepository creates a new mock instance.
func NewMockIfUserRepository(ctrl *gomock.Controller) *MockIfUserRepository {
	mock := &MockIfUserRepository{ctrl: ctrl}
	mock.recorder = &MockIfUserRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIfUserRepository) EXPECT() *MockIfUserRepositoryMockRecorder {
	return m.recorder
}

// CountByEmail mocks base method.
func (m *MockIfUserRepository) CountByEmail(arg0 context.Context, arg1 string) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CountByEmail", arg0, arg1)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CountByEmail indicates an expected call of CountByEmail.
func (mr *MockIfUserRepositoryMockRecorder) CountByEmail(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CountByEmail", reflect.TypeOf((*MockIfUserRepository)(nil).CountByEmail), arg0, arg1)
}

// CountByName mocks base method.
func (m *MockIfUserRepository) CountByName(arg0 context.Context, arg1 string) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CountByName", arg0, arg1)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CountByName indicates an expected call of CountByName.
func (mr *MockIfUserRepositoryMockRecorder) CountByName(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CountByName", reflect.TypeOf((*MockIfUserRepository)(nil).CountByName), arg0, arg1)
}

// Create mocks base method.
func (m *MockIfUserRepository) Create(arg0 context.Context, arg1 *entity.User) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// Create indicates an expected call of Create.
func (mr *MockIfUserRepositoryMockRecorder) Create(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockIfUserRepository)(nil).Create), arg0, arg1)
}

// CreateWithChan mocks base method.
func (m *MockIfUserRepository) CreateWithChan(arg0 context.Context, arg1 <-chan *entity.User, arg2 chan<- error) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "CreateWithChan", arg0, arg1, arg2)
}

// CreateWithChan indicates an expected call of CreateWithChan.
func (mr *MockIfUserRepositoryMockRecorder) CreateWithChan(arg0, arg1, arg2 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateWithChan", reflect.TypeOf((*MockIfUserRepository)(nil).CreateWithChan), arg0, arg1, arg2)
}

// Get mocks base method.
func (m *MockIfUserRepository) Get(arg0 context.Context, arg1 int) (*entity.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", arg0, arg1)
	ret0, _ := ret[0].(*entity.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockIfUserRepositoryMockRecorder) Get(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockIfUserRepository)(nil).Get), arg0, arg1)
}

// GetWithArticles mocks base method.
func (m *MockIfUserRepository) GetWithArticles(arg0 context.Context, arg1 int) (*entity.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetWithArticles", arg0, arg1)
	ret0, _ := ret[0].(*entity.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetWithArticles indicates an expected call of GetWithArticles.
func (mr *MockIfUserRepositoryMockRecorder) GetWithArticles(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetWithArticles", reflect.TypeOf((*MockIfUserRepository)(nil).GetWithArticles), arg0, arg1)
}

// ListWithChan mocks base method.
func (m *MockIfUserRepository) ListWithChan(arg0 context.Context, arg1 []int, arg2 chan<- *entity.User, arg3 chan<- error) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "ListWithChan", arg0, arg1, arg2, arg3)
}

// ListWithChan indicates an expected call of ListWithChan.
func (mr *MockIfUserRepositoryMockRecorder) ListWithChan(arg0, arg1, arg2, arg3 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListWithChan", reflect.TypeOf((*MockIfUserRepository)(nil).ListWithChan), arg0, arg1, arg2, arg3)
}
