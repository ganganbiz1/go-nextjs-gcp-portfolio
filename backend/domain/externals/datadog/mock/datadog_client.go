// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/ganganbiz1/go-nextjs-gcp-portfolio/backend/domain/externals/datadog (interfaces: IfDatadogClient)
//
// Generated by this command:
//
//	mockgen -destination=../domain/externals/datadog/mock/datadog_client.go github.com/ganganbiz1/go-nextjs-gcp-portfolio/backend/domain/externals/datadog IfDatadogClient
//

// Package mock_datadog is a generated GoMock package.
package mock_datadog

import (
	context "context"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
	ddtrace "gopkg.in/DataDog/dd-trace-go.v1/ddtrace"
)

// MockIfDatadogClient is a mock of IfDatadogClient interface.
type MockIfDatadogClient struct {
	ctrl     *gomock.Controller
	recorder *MockIfDatadogClientMockRecorder
}

// MockIfDatadogClientMockRecorder is the mock recorder for MockIfDatadogClient.
type MockIfDatadogClientMockRecorder struct {
	mock *MockIfDatadogClient
}

// NewMockIfDatadogClient creates a new mock instance.
func NewMockIfDatadogClient(ctrl *gomock.Controller) *MockIfDatadogClient {
	mock := &MockIfDatadogClient{ctrl: ctrl}
	mock.recorder = &MockIfDatadogClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIfDatadogClient) EXPECT() *MockIfDatadogClientMockRecorder {
	return m.recorder
}

// ServiceName mocks base method.
func (m *MockIfDatadogClient) ServiceName(arg0 string) string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ServiceName", arg0)
	ret0, _ := ret[0].(string)
	return ret0
}

// ServiceName indicates an expected call of ServiceName.
func (mr *MockIfDatadogClientMockRecorder) ServiceName(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ServiceName", reflect.TypeOf((*MockIfDatadogClient)(nil).ServiceName), arg0)
}

// StartSpan mocks base method.
func (m *MockIfDatadogClient) StartSpan(arg0 context.Context, arg1 string) (ddtrace.Span, context.Context) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StartSpan", arg0, arg1)
	ret0, _ := ret[0].(ddtrace.Span)
	ret1, _ := ret[1].(context.Context)
	return ret0, ret1
}

// StartSpan indicates an expected call of StartSpan.
func (mr *MockIfDatadogClientMockRecorder) StartSpan(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StartSpan", reflect.TypeOf((*MockIfDatadogClient)(nil).StartSpan), arg0, arg1)
}

// StartTrace mocks base method.
func (m *MockIfDatadogClient) StartTrace() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "StartTrace")
}

// StartTrace indicates an expected call of StartTrace.
func (mr *MockIfDatadogClientMockRecorder) StartTrace() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StartTrace", reflect.TypeOf((*MockIfDatadogClient)(nil).StartTrace))
}

// StopTrace mocks base method.
func (m *MockIfDatadogClient) StopTrace() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "StopTrace")
}

// StopTrace indicates an expected call of StopTrace.
func (mr *MockIfDatadogClientMockRecorder) StopTrace() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StopTrace", reflect.TypeOf((*MockIfDatadogClient)(nil).StopTrace))
}
