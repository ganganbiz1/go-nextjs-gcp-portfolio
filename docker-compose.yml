services:
  frontend:
    container_name: frontend
    build:
      context: ./frontend
      target: dev
    ports:
      - "3002:3000"
    volumes:
      - ./frontend/:/frontend
    env_file: .env.fornt
    environment:
      - WATCHPACK_POLLING=true
  backend:
    container_name: backend-api
    build:
      context: ./backend
      target: dev
    ports:
      - "9002:${SERVER_PORT}"
      - "2347:2347"
    volumes:
      - ./:/src
    env_file: .env
    depends_on:
      db:
        condition: service_healthy
  db:
    container_name: db
    image: postgres:15.6
    ports:
      - "55432:${POSTGRES_PORT}"
    env_file: .env
    environment:
      POSTGRES_DB: ${POSTGRES_DB}
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      TZ: UTC
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -h 127.0.0.1 -U ${POSTGRES_USER}"]
      interval: 10s
      timeout: 5s
      retries: 5
    volumes:
      - postgres-data:/var/lib/postgresql/data
  testdb:
    container_name: testdb
    image: postgres:15.6
    ports:
      - "65432:${POSTGRES_PORT_TEST}"
    env_file: .env
    environment:
      POSTGRES_DB: ${POSTGRES_DB_TEST}
      POSTGRES_USER: ${POSTGRES_USER_TEST}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD_TEST}
      TZ: UTC
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -h 127.0.0.1 -U ${POSTGRES_USER_TEST}"]
      interval: 10s
      timeout: 5s
      retries: 5
    volumes:
      - ./ddl:/docker-entrypoint-initdb.d/
  datadog:
    image: datadog/agent:latest
    environment:
      - DD_API_KEY=APIキーをここに書く
      - DD_ENV=local
      - DD_APM_ENABLED=true
    ports:
      - 8126:8126
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock:ro
      - /proc/:/host/proc/:ro
      - /sys/fs/cgroup:/host/sys/fs/cgroup:ro
volumes:
  postgres-data:
